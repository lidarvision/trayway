const { app, Tray, Menu, nativeImage, BrowserWindow, globalShortcut, screen, ipcMain, dialog } = require('electron');
const { autoUpdater } = require('electron-updater');
const fs = require('fs');
const path = require('path');

let tray = null;
let config = null;
let settingsWindow = null;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
autoUpdater.setFeedURL({
  provider: 'github',
  owner: 'lidarvision', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à GitHub username
  repo: 'trayway' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
autoUpdater.autoDownload = false; // –ù–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
autoUpdater.autoInstallOnAppQuit = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

// –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
if (process.env.NODE_ENV === 'development') {
  autoUpdater.forceDevUpdateConfig = true;
}

// –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_CONFIG = {
  folders: [
    {
      label: "Finder",
      path: "/"
    }
  ],
  sites: [
    {
      label: "Google",
      url: "https://google.com",
      type: "site"
    }
  ],
  trayEmoji: "üòä",
  appName: "TrayWay",
  useExternalBrowser: true, // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä
  allowIconChange: true, // –í–∫–ª—é—á–∞–µ–º –∑–∞–º–µ–Ω—É –∏–∫–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  showClock: false,
  firstRun: true, // –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  autoStart: false // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ icons –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
function ensureIconsDirectory() {
  try {
    const iconsDir = path.join(__dirname, 'icons');
    if (!fs.existsSync(iconsDir)) {
      fs.mkdirSync(iconsDir, { recursive: true });
      console.log('–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ icons');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ icons:', error);
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–∫–æ–Ω–æ–∫ –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
function cleanupOldLowResIcons() {
  try {
    const iconsDir = path.join(__dirname, 'icons');
    if (fs.existsSync(iconsDir)) {
      const files = fs.readdirSync(iconsDir);
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º emoji-icon- (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç 24x24)
      const oldIcons = files.filter(file => file.startsWith('emoji-icon-') && file.endsWith('.png'));
      
      oldIcons.forEach(file => {
        const filePath = path.join(iconsDir, file);
        fs.unlinkSync(filePath);
        console.log('–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', file);
      });
      
      // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º emoji- (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
      const emojiIcons = files.filter(file => file.startsWith('emoji-') && file.endsWith('.png'));
      
      emojiIcons.forEach(file => {
        const filePath = path.join(iconsDir, file);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - –µ—Å–ª–∏ –æ–Ω –º–∞–ª–µ–Ω—å–∫–∏–π, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Å—Ç–∞—Ä–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        const stats = fs.statSync(filePath);
        if (stats.size < 2000) { // –°—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ 24x24 –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ 2KB
          fs.unlinkSync(filePath);
          console.log('–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', file);
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏–∫–æ–Ω–æ–∫:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function loadConfig() {
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É icons –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensureIconsDirectory();
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    cleanupOldLowResIcons();
    
    const configPath = path.join(__dirname, 'config.json');
    if (fs.existsSync(configPath)) {
      const configData = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      config = {
        ...DEFAULT_CONFIG,
        ...configData,
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        allowIconChange: configData.allowIconChange !== undefined ? configData.allowIconChange : true,
        showClock: configData.showClock || false,
        firstRun: configData.firstRun !== undefined ? configData.firstRun : true,
        autoStart: configData.autoStart || false
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
      if (configData.autoStart !== undefined) {
        const realAutoStart = isAutoStartEnabled();
        if (realAutoStart !== configData.autoStart) {
          console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π');
          config.autoStart = realAutoStart;
        }
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–ø–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –ø—É—Ç—è–º–∏
      config.folders = config.folders.filter(folder => folder.path && folder.path.trim() !== '');
      
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', config);
    } else {
      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      config = { ...DEFAULT_CONFIG };
      console.log('–°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', config);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —Å–º–∞–π–ª–∏–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    ensureEmojiIconExists();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    config = { ...DEFAULT_CONFIG };
    console.log('–°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', config);
  }
}

// –°–æ–∑–¥–∞–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é PNG –∏–∫–æ–Ω–∫—É –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function createHighResEmojiPNG(emoji) {
  console.log('createHighResEmojiPNG: —Å–æ–∑–¥–∞—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é PNG –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–º–∞–π–ª–∏–∫–∞:', emoji);
  
  try {
    const { createCanvas } = require('canvas');
    
    // –°–æ–∑–¥–∞–µ–º canvas –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è 64x64 –ø–∏–∫—Å–µ–ª—è –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
    const canvas = createCanvas(64, 64);
    const ctx = canvas.getContext('2d');
    
    // –í–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = 'high';
    
    // –ù–µ –∑–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
    // ctx.fillStyle = 'white';
    // ctx.fillRect(0, 0, 64, 64);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è —Å–º–∞–π–ª–∏–∫–∞ (–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏)
    ctx.font = 'bold 48px Apple Color Emoji, Segoe UI Emoji, Noto Color Emoji, sans-serif';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ç–µ–Ω—å –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
    ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';
    ctx.shadowBlur = 1;
    ctx.shadowOffsetX = 1;
    ctx.shadowOffsetY = 1;
    
    // –†–∏—Å—É–µ–º —Å–º–∞–π–ª–∏–∫ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ —Å —Å–º–µ—â–µ–Ω–∏–µ–º –≤–Ω–∏–∑ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    ctx.fillText(emoji, 32, 38);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas –≤ PNG buffer
    const buffer = canvas.toBuffer('image/png');
    console.log('createHighResEmojiPNG: –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π PNG buffer —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', buffer.length);
    
    return buffer;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π PNG –∏–∫–æ–Ω–∫–∏:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É —Å–º–∞–π–ª–∏–∫–∞ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureEmojiIconExists() {
  if (config.allowIconChange && config.trayEmoji) {
    const iconPath = path.join(__dirname, 'icons', `emoji-${config.trayEmoji}.png`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Å—Ç–∞—Ä–æ–π –∏–∫–æ–Ω–∫–æ–π –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    let needsUpdate = false;
    if (fs.existsSync(iconPath)) {
      const stats = fs.statSync(iconPath);
      if (stats.size < 2000) { // –°—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ 24x24 –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ 2KB
        console.log('–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é:', config.trayEmoji);
        fs.unlinkSync(iconPath);
        needsUpdate = true;
      }
    } else {
      needsUpdate = true;
    }
    
    if (needsUpdate) {
      console.log('–°–æ–∑–¥–∞—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É —Å–º–∞–π–ª–∏–∫–∞:', config.trayEmoji);
      try {
        const buffer = createHighResEmojiPNG(config.trayEmoji);
        if (buffer) {
          fs.writeFileSync(iconPath, buffer);
          config.trayEmojiIcon = iconPath;
          console.log('–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞ —Å–º–∞–π–ª–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', iconPath);
        } else {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—É—Ñ–µ—Ä PNG –¥–ª—è —Å–º–∞–π–ª–∏–∫–∞:', config.trayEmoji);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–∫–æ–Ω–∫–∏ —Å–º–∞–π–ª–∏–∫–∞:', error);
      }
    } else {
      config.trayEmojiIcon = iconPath;
      console.log('–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞ —Å–º–∞–π–ª–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', iconPath);
    }
  }
}

function openSiteInTab(site) {
  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
  if (site.type === 'app') {
    require('electron').shell.openPath(site.url);
    return;
  }
  
  // –í—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç—ã –≤–æ –≤–Ω–µ—à–Ω–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
  require('electron').shell.openExternal(site.url);
}


function buildContextMenu() {
  const menuItems = [];
  
  console.log('–°–æ–∑–¥–∞—é –º–µ–Ω—é —Ç—Ä–µ—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:', config);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (config.folders && config.folders.length > 0) {
    console.log('–î–æ–±–∞–≤–ª—è—é –ø–∞–ø–∫–∏ –≤ –º–µ–Ω—é:', config.folders);
    config.folders.forEach(folder => {
      if (folder.label && folder.path) {
        menuItems.push({
          label: folder.label,
          click: () => require('electron').shell.openPath(folder.path)
        });
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –≤ –º–µ–Ω—é:', folder.label, folder.path);
      } else {
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞—é –ø–∞–ø–∫—É —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', folder);
      }
    });
    
    if (menuItems.length > 0) {
      menuItems.push({ type: 'separator' });
    }
  } else {
    console.log('–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç—ã
  if (config.sites && config.sites.length > 0) {
    console.log('–î–æ–±–∞–≤–ª—è—é —Å–∞–π—Ç—ã –≤ –º–µ–Ω—é:', config.sites);
    config.sites.forEach(site => {
      if (site.label && site.url) {
        menuItems.push({
          label: site.label,
          click: () => openSiteInTab(site)
        });
      }
    });
    
    if (menuItems.length > 0) {
      menuItems.push({ type: 'separator' });
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  menuItems.push({ type: 'separator' });
  menuItems.push({
    label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    click: () => openSettingsWindow()
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
  menuItems.push({
    label: '–í—ã–π—Ç–∏',
    click: () => {
      const { dialog } = require('electron');
      const result = dialog.showMessageBoxSync(null, {
        type: 'question',
        buttons: ['–û—Ç–º–µ–Ω–∞', '–í—ã–π—Ç–∏'],
        defaultId: 1,
        title: '–í—ã—Ö–æ–¥ –∏–∑ TrayWay',
        message: '–ó–∞–∫—Ä—ã—Ç—å TrayWay?',
        detail: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.',
        icon: path.join(__dirname, 'icon.png')
      });
      
      if (result === 1) {
        app.quit();
      }
    }
  });
  
  console.log('–ò—Ç–æ–≥–æ–≤–æ–µ –º–µ–Ω—é —Ç—Ä–µ—è:', menuItems);
  return Menu.buildFromTemplate(menuItems);
}

// –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç—Ä–µ—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
function getTrayIconSize() {
  if (process.platform === 'darwin') {
    return 22; // macOS —Ç—Ä–µ–π –æ–±—ã—á–Ω–æ 22x22
  } else if (process.platform === 'win32') {
    return 16; // Windows —Ç—Ä–µ–π –æ–±—ã—á–Ω–æ 16x16
  } else {
    return 24; // Linux —Ç—Ä–µ–π –æ–±—ã—á–Ω–æ 24x24
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è –∏–∑ —Å–º–∞–π–ª–∏–∫–∞
function createEmojiIcon(emoji) {
  console.log('createEmojiIcon: —Å–æ–∑–¥–∞—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é PNG –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–º–∞–π–ª–∏–∫–∞:', emoji);
  
  try {
    const { createCanvas } = require('canvas');
    
    // –°–æ–∑–¥–∞–µ–º canvas –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è 64x64 –ø–∏–∫—Å–µ–ª—è –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
    const canvas = createCanvas(64, 64);
    const ctx = canvas.getContext('2d');
    
    // –í–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = 'high';
    
    // –ù–µ –∑–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
    // ctx.fillStyle = 'white';
    // ctx.fillRect(0, 0, 64, 64);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è —Å–º–∞–π–ª–∏–∫–∞ (–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏)
    ctx.font = 'bold 48px Apple Color Emoji, Segoe UI Emoji, Noto Color Emoji, sans-serif';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ç–µ–Ω—å –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
    ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';
    ctx.shadowBlur = 1;
    ctx.shadowOffsetX = 1;
    ctx.shadowOffsetY = 1;
    
    // –†–∏—Å—É–µ–º —Å–º–∞–π–ª–∏–∫ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ —Å —Å–º–µ—â–µ–Ω–∏–µ–º –≤–Ω–∏–∑ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    ctx.fillText(emoji, 32, 38);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas –≤ PNG buffer
    const buffer = canvas.toBuffer('image/png');
    console.log('createEmojiIcon: –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π PNG buffer —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', buffer.length);
    
    // –°–æ–∑–¥–∞–µ–º nativeImage –∏–∑ PNG buffer
    const icon = nativeImage.createFromBuffer(buffer);
    console.log('createEmojiIcon: nativeImage —Å–æ–∑–¥–∞–Ω, isEmpty:', icon.isEmpty());
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–µ—è
    const traySize = getTrayIconSize();
    const scaledIcon = icon.resize({ width: traySize, height: traySize });
    console.log('createEmojiIcon: –∏–∫–æ–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–µ—è:', traySize + 'x' + traySize);
    
    return scaledIcon;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π PNG –∏–∫–æ–Ω–∫–∏:', error);
    
    // Fallback –∫ SVG –µ—Å–ª–∏ canvas –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ä–∞–∑–º–µ—Ä —Ç—Ä–µ—è)
    const traySize = getTrayIconSize();
    const fontSize = Math.floor(traySize * 0.75); // 75% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–µ—è
    const svg = `<svg width="${traySize}" height="${traySize}" xmlns="http://www.w3.org/2000/svg">
      <text x="${traySize/2}" y="${traySize/2 + fontSize/4 + 2}" font-size="${fontSize}" font-weight="bold" font-family="Apple Color Emoji, Segoe UI Emoji, Noto Color Emoji, sans-serif" text-anchor="middle" dominant-baseline="middle">${emoji}</text>
    </svg>`;
    
    const dataUrl = 'data:image/svg+xml;base64,' + Buffer.from(svg).toString('base64');
    return nativeImage.createFromDataURL(dataUrl);
  }
}

// –§—É–Ω–∫—Ü–∏—è updateTrayMenu –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é

function createTrayOnly() {
  if (process.platform === 'darwin' && app.dock) {
    app.dock.hide();
  }

  let trayIcon;
  
  console.log('createTrayOnly: allowIconChange =', config.allowIconChange, 'trayEmoji =', config.trayEmoji, 'trayEmojiIcon =', config.trayEmojiIcon);
  
  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞–º–µ–Ω–∞ –∏–∫–æ–Ω–∫–∏, –ù–ï –≤—ã–±—Ä–∞–Ω –∫—Ä–µ—Å—Ç–∏–∫ –∏ –µ—Å—Ç—å PNG –∏–∫–æ–Ω–∫–∞ —Å–º–∞–π–ª–∏–∫–∞
  if (config.allowIconChange && config.trayEmoji !== '‚úï' && config.trayEmojiIcon && fs.existsSync(config.trayEmojiIcon)) {
    console.log('createTrayOnly: –∏—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é PNG –∏–∫–æ–Ω–∫—É');
    const highResIcon = nativeImage.createFromPath(config.trayEmojiIcon);
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–µ—è
    const traySize = getTrayIconSize();
    trayIcon = highResIcon.resize({ width: traySize, height: traySize });
    console.log('createTrayOnly: PNG –∏–∫–æ–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–µ—è:', traySize + 'x' + traySize);
  } else if (config.allowIconChange && config.trayEmoji && config.trayEmoji !== '‚úï') {
    console.log('createTrayOnly: —Å–æ–∑–¥–∞—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É –∏–∑ —Å–º–∞–π–ª–∏–∫–∞');
    trayIcon = createEmojiIcon(config.trayEmoji);
  } else {
    console.log('createTrayOnly: –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É (–∑–∞–º–µ–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω –∫—Ä–µ—Å—Ç–∏–∫)');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
    let trayIconPath = path.join(__dirname, 'icon.svg');
    if (fs.existsSync(trayIconPath)) {
      trayIcon = nativeImage.createFromPath(trayIconPath);
    } else {
      const svg = `<svg width="32" height="32" xmlns="http://www.w3.org/2000/svg"><circle cx="16" cy="16" r="16" fill="#1e90ff"/><text x="16" y="22" font-size="18" font-family="Arial" fill="#fff" text-anchor="middle" font-weight="bold">P</text></svg>`;
      trayIcon = nativeImage.createFromDataURL('data:image/svg+xml;base64,' + Buffer.from(svg).toString('base64'));
    }
  }
  
  tray = new Tray(trayIcon);
  
  console.log('–°–æ–∑–¥–∞–Ω —Ç—Ä–µ–π —Å –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–µ–Ω—é —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:', config);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é —Ç—Ä–µ—è
  tray.setContextMenu(buildContextMenu());
  tray.setToolTip(config.appName || 'TrayWay');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ—è
  updateTrayText();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Å—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —á–∞—Å—ã –∏–ª–∏ –±–∞—Ç–∞—Ä–µ—è
  if (config.showClock || config.showBattery) {
    startClock();
  }
}

// –§—É–Ω–∫—Ü–∏—è openRootTabWindow —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä

function openCustomMenuWindow(x, y) {
  const menuWin = new BrowserWindow({
    width: 1,
    height: 1,
    x: x,
    y: y,
    frame: false,
    transparent: true,
    alwaysOnTop: true,
    resizable: true,
    skipTaskbar: true,
    show: false,
    hasShadow: false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });
  menuWin.loadFile('menu.html');
  menuWin.once('ready-to-show', () => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ menu.html
    menuWin.webContents.send('config-updated', config);
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    menuWin.webContents.executeJavaScript(`
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      setTimeout(() => {
        const contentHeight = document.body.scrollHeight;
        const contentWidth = document.body.scrollWidth;
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        require('electron').ipcRenderer.send('resize-menu-window', { width: contentWidth, height: contentHeight });
      }, 200); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    `);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    menuWin.once('resize', () => {
      menuWin.show();
    });
  });
  menuWin.on('blur', () => { if (!menuWin.isDestroyed()) menuWin.close(); });
}

function openSettingsWindow() {
  if (settingsWindow && !settingsWindow.isDestroyed()) {
    settingsWindow.focus();
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–∫–Ω–∞
  const point = screen.getCursorScreenPoint();
  
  settingsWindow = new BrowserWindow({
    width: 500,
    height: 600,
    minWidth: 500,
    maxWidth: 500,
    minHeight: 600,
    maxHeight: 600,
    x: point.x - 250, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫—É—Ä—Å–æ—Ä–∞
    y: point.y - 100,
    frame: true, // –û–±—ã—á–Ω–∞—è —Ä–∞–º–∫–∞ macOS
    transparent: false, // –ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –æ–∫–Ω–æ
    alwaysOnTop: false, // –ù–µ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω
    resizable: false, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    minimizable: true, // –ú–æ–∂–Ω–æ —Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
    maximizable: false, // –ù–µ–ª—å–∑—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
    skipTaskbar: false, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ Dock
    show: false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    },
    title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ plusplus',
    icon: path.join(__dirname, 'icon.png')
  });
  
  settingsWindow.loadFile('settings.html');
  settingsWindow.once('ready-to-show', () => settingsWindow.show());
  
  settingsWindow.on('closed', () => {
    settingsWindow = null;
  });
}

function updateTrayText() {
  if (tray && process.platform === 'darwin') {
    // –ï—Å–ª–∏ —á–∞—Å—ã –≤–∫–ª—é—á–µ–Ω—ã, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç updateTrayTime
    if (config.showClock) {
      return;
    }
    
    // –ï—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –∏–∫–æ–Ω–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    if (!config.allowIconChange) {
      tray.setTitle('');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–π —Å–º–∞–π–ª–∏–∫ –≤—ã–±—Ä–∞–Ω
    if (config.trayText && config.trayText.trim() !== '') {
      tray.setTitle(config.trayText.trim());
    } else {
      tray.setTitle('');
    }
  }
}

function updateTrayIcon() {
  if (tray) {
    let trayIcon;
    
    console.log('updateTrayIcon: allowIconChange =', config.allowIconChange, 'trayEmoji =', config.trayEmoji, 'trayEmojiIcon =', config.trayEmojiIcon);
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞–º–µ–Ω–∞ –∏–∫–æ–Ω–∫–∏, –ù–ï –≤—ã–±—Ä–∞–Ω –∫—Ä–µ—Å—Ç–∏–∫ –∏ –µ—Å—Ç—å PNG –∏–∫–æ–Ω–∫–∞ —Å–º–∞–π–ª–∏–∫–∞
    if (config.allowIconChange && config.trayEmoji !== '‚úï' && config.trayEmojiIcon && fs.existsSync(config.trayEmojiIcon)) {
      console.log('–ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é PNG –∏–∫–æ–Ω–∫—É:', config.trayEmojiIcon);
      const highResIcon = nativeImage.createFromPath(config.trayEmojiIcon);
      // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–µ—è
      const traySize = getTrayIconSize();
      trayIcon = highResIcon.resize({ width: traySize, height: traySize });
      console.log('PNG –∏–∫–æ–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–µ—è:', traySize + 'x' + traySize);
    } else if (config.allowIconChange && config.trayEmoji && config.trayEmoji !== '‚úï') {
      console.log('–°–æ–∑–¥–∞—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É –∏–∑ —Å–º–∞–π–ª–∏–∫–∞:', config.trayEmoji);
      trayIcon = createEmojiIcon(config.trayEmoji);
    } else {
      console.log('–ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É (–∑–∞–º–µ–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω –∫—Ä–µ—Å—Ç–∏–∫)');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
      let trayIconPath = path.join(__dirname, 'icon.svg');
      if (fs.existsSync(trayIconPath)) {
        trayIcon = nativeImage.createFromPath(trayIconPath);
      } else {
        const svg = `<svg width="32" height="32" xmlns="http://www.w3.org/2000/svg"><circle cx="16" cy="16" r="16" fill="#1e90ff"/><text x="16" y="22" font-size="18" font-family="Arial" fill="#fff" text-anchor="middle" font-weight="bold">P</text></svg>`;
        trayIcon = nativeImage.createFromDataURL('data:image/svg+xml;base64,' + Buffer.from(svg).toString('base64'));
      }
    }
    
    console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–æ–≤—É—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è');
    tray.setImage(trayIcon);
    tray.setToolTip(config.appName || 'TrayWay');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ—è
    updateTrayText();
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç—Ä–µ—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏
    tray.setContextMenu(buildContextMenu());
  } else {
    console.log('–¢—Ä–µ–π –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ IPC –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function setupIpcHandlers() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞
  ipcMain.on('open-site', (event, site) => {
    console.log('ipcMain open-site', site);
    openSiteInTab(site);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω–µ—à–Ω–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
  ipcMain.on('open-external-browser', (event, url) => {
    try {
      require('electron').shell.openExternal(url);
    } catch (error) {
      console.error('Error opening in external browser:', error);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –º–µ–Ω—é
  ipcMain.on('resize-menu-window', (event, { width, height }) => {
    const window = BrowserWindow.fromWebContents(event.sender);
    if (window) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
      const padding = 20;
      const maxHeight = 400; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π
      const finalHeight = Math.min(height, maxHeight);
      
      window.setSize(width + padding, finalHeight + padding);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π PNG –∏–∫–æ–Ω–∫–∏ –∏–∑ —Å–º–∞–π–ª–∏–∫–∞
  ipcMain.on('emoji-icon-created', (event, { emoji, dataURL }) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è PNG –∏–∫–æ–Ω–∫–∞ –¥–ª—è —Å–º–∞–π–ª–∏–∫–∞:', emoji);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É icons –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      ensureIconsDirectory();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é PNG –∏–∫–æ–Ω–∫—É –≤ –ø–∞–ø–∫—É icons
      const iconPath = path.join(__dirname, 'icons', `emoji-${emoji}.png`);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º data URL –≤ buffer
      const base64Data = dataURL.replace(/^data:image\/png;base64,/, '');
      const buffer = Buffer.from(base64Data, 'base64');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      fs.writeFileSync(iconPath, buffer);
      console.log('–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è PNG –∏–∫–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', iconPath, '—Ä–∞–∑–º–µ—Ä:', buffer.length, '–±–∞–π—Ç');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—É—Ç–µ–º –∫ –∏–∫–æ–Ω–∫–µ
      config.trayEmojiIcon = iconPath;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è
      updateTrayIcon();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π PNG –∏–∫–æ–Ω–∫–∏:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  ipcMain.on('config-updated', (event, newConfig) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', newConfig);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    config = { ...config, ...newConfig };
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', config);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç—Ä–µ—è
    if (tray) {
      console.log('–û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é —Ç—Ä–µ—è —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
      tray.setContextMenu(buildContextMenu());
    }
    
    updateTrayIcon();
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (config.showClock || config.showBattery) {
      startClock();
    } else {
      stopClock();
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ—è
      if (tray) {
        tray.setToolTip(config.appName || 'TrayWay');
        updateTrayText();
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ—è
  ipcMain.on('update-tray-text', (event, text) => {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ—è:', text);
    config.trayText = text;
    updateTrayText();
    
    // –ï—Å–ª–∏ —á–∞—Å—ã –≤–∫–ª—é—á–µ–Ω—ã, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    if (config.showClock && tray) {
      updateTrayTime();
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
  ipcMain.on('toggle-autostart', (event, enable) => {
    if (enable) {
      if (setupAutoStart()) {
        config.autoStart = true;
        saveConfig();
        event.sender.send('autostart-status', true);
      } else {
        event.sender.send('autostart-status', false);
      }
    } else {
      if (removeAutoStart()) {
        config.autoStart = false;
        saveConfig();
        event.sender.send('autostart-status', false);
      } else {
        event.sender.send('autostart-status', true);
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
  ipcMain.on('get-autostart-status', (event) => {
    const currentStatus = isAutoStartEnabled();
    config.autoStart = currentStatus;
    event.sender.send('autostart-status', currentStatus);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  ipcMain.on('open-settings', () => {
    openSettingsWindow();
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  ipcMain.on('save-config', (event, newConfig) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', newConfig);
    config = newConfig;
    saveConfig();
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  ipcMain.on('show-reset-confirm-dialog', async (event) => {
    const result = await dialog.showMessageBox({
      type: 'question',
      buttons: ['–û—Ç–º–µ–Ω–∞', '–°–±—Ä–æ—Å–∏—Ç—å'],
      defaultId: 1,
      title: '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      message: '–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?',
      detail: '–í—Å–µ –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.',
      icon: path.join(__dirname, 'icon.png')
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ renderer
    event.sender.send('reset-confirm-result', result.response === 1);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
  ipcMain.on('select-folder', async (event, inputId) => {
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory'],
      title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É'
    });
    
    if (!result.canceled && result.filePaths.length > 0) {
      event.sender.send('folder-selected', { inputId, path: result.filePaths[0] });
    }
  });
  
  ipcMain.on('select-application', async (event, inputId) => {
    const result = await dialog.showOpenDialog({
      properties: ['openFile'],
      defaultPath: '/Applications',
      filters: [
        { name: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è', extensions: ['app'] }
      ],
      title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ Applications'
    });
    
    if (!result.canceled && result.filePaths.length > 0) {
      event.sender.send('application-selected', { inputId, path: result.filePaths[0] });
    }
  });
  
  ipcMain.on('select-file', async (event, { inputId, extension }) => {
    const filters = extension === 'conf' 
      ? [{ name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã', extensions: ['conf', 'config', 'cfg'] }]
      : [{ name: '–í—Å–µ —Ñ–∞–π–ª—ã', extensions: ['*'] }];
      
    const result = await dialog.showOpenDialog({
      properties: ['openFile'],
      filters: filters,
      title: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'
    });
    
    if (!result.canceled && result.filePaths.length > 0) {
      event.sender.send('file-selected', { inputId, path: result.filePaths[0] });
    }
  });
  
  ipcMain.on('select-app-for-site', async (event, index) => {
    const result = await dialog.showOpenDialog({
      properties: ['openFile'],
      defaultPath: '/Applications',
      filters: [
        { name: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è', extensions: ['app'] }
      ],
      title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ Applications'
    });
    
    if (!result.canceled && result.filePaths.length > 0) {
      event.sender.send('app-for-site-selected', { index, path: result.filePaths[0] });
    }
  });
  
  ipcMain.on('select-folder-for-item', async (event, index) => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –¥–ª—è —ç—Ç–æ–π –ø–∞–ø–∫–∏
    let defaultPath = '';
    if (config && config.folders && config.folders[index]) {
      defaultPath = config.folders[index].path || '';
    }
    
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory'],
      defaultPath: defaultPath,
      title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É'
    });
    
    if (!result.canceled && result.filePaths.length > 0) {
      event.sender.send('folder-for-item-selected', { index, path: result.filePaths[0] });
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  ipcMain.on('check-for-updates', (event) => {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    autoUpdater.checkForUpdatesAndNotify();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    event.sender.send('update-check-started');
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  ipcMain.on('download-update', (event) => {
    console.log('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    autoUpdater.downloadUpdate();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    event.sender.send('update-download-started');
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  ipcMain.on('restart-app', () => {
    console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    autoUpdater.quitAndInstall();
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ menu.html
  ipcMain.on('refresh-menu-config', (event) => {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ menu.html');
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    loadConfig();
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ menu.html
    event.sender.send('config-updated', config);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function setupUpdateHandlers() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  autoUpdater.on('update-available', (info) => {
    console.log('–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', info.version);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (tray) {
      tray.displayBalloon({
        iconType: 'info',
        title: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
        content: `–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ${info.version}. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.`,
        noSound: false
      });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (settingsWindow && !settingsWindow.isDestroyed()) {
      settingsWindow.webContents.send('update-check-result', {
        available: true,
        version: info.version,
        message: `–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ${info.version}`
      });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
  autoUpdater.on('update-not-available', (info) => {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Ç:', info.version);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (settingsWindow && !settingsWindow.isDestroyed()) {
      settingsWindow.webContents.send('update-check-result', {
        available: false,
        message: '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è'
      });
    }
  });

  // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  autoUpdater.on('error', (err) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', err);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (settingsWindow && !settingsWindow.isDestroyed()) {
      settingsWindow.webContents.send('update-check-result', {
        available: false,
        error: true,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ' + err.message
      });
    }
  });

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  autoUpdater.on('download-progress', (progressObj) => {
    let log_message = "–°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: " + progressObj.bytesPerSecond;
    log_message = log_message + ' - –°–∫–∞—á–∞–Ω–æ ' + progressObj.percent + '%';
    log_message = log_message + ' (' + progressObj.transferred + "/" + progressObj.total + ')';
    console.log(log_message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (settingsWindow && !settingsWindow.isDestroyed()) {
      settingsWindow.webContents.send('update-download-progress', {
        percent: Math.round(progressObj.percent),
        message: `–°–∫–∞—á–∞–Ω–æ ${Math.round(progressObj.percent)}%`
      });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ
  autoUpdater.on('update-downloaded', (info) => {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ:', info.version);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (settingsWindow && !settingsWindow.isDestroyed()) {
      settingsWindow.webContents.send('update-downloaded', info);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
    const result = dialog.showMessageBoxSync(null, {
      type: 'info',
      buttons: ['–ü–æ–∑–∂–µ', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å'],
      defaultId: 1,
      title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ',
      message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ ${info.version} —Å–∫–∞—á–∞–Ω–æ.`,
      detail: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è?',
      icon: path.join(__dirname, 'icon.png')
    });
    
    if (result === 1) {
      autoUpdater.quitAndInstall();
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
  setInterval(() => {
    autoUpdater.checkForUpdatesAndNotify();
  }, 7 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π
}

app.whenReady().then(() => {
  loadConfig();
  createTrayOnly();
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç—Ä–µ—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
  if (tray) {
    tray.setContextMenu(buildContextMenu());
  }

  globalShortcut.register('CommandOrControl+1', () => {
    const point = screen.getCursorScreenPoint();
    openCustomMenuWindow(point.x, point.y);
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ IPC
  setupIpcHandlers();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  setupUpdateHandlers();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  setTimeout(() => {
    showFirstRunDialog();
  }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});

app.on('activate', () => {
  if (tray) {
    // If the tray icon exists, it means the app is running.
    // No need to create a new window here as the app is now only in the tray.
  }
});

app.on('will-quit', () => {
  globalShortcut.unregisterAll();
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–∞–º–∏
let clockInterval = null;

function startClock() {
  if (clockInterval) {
    clearInterval(clockInterval);
  }
  
  clockInterval = setInterval(() => {
    if (tray && (config.showClock || config.showBattery)) {
      updateTrayTime();
    }
  }, 1000);
}

function stopClock() {
  if (clockInterval) {
    clearInterval(clockInterval);
    clockInterval = null;
  }
}

function updateTrayTime() {
  if (!tray || (!config.showClock && !config.showBattery)) return;
  
  const now = new Date();
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ UTC+5 (–ê—Å—Ç–∞–Ω–∞)
  const utcTime = now.getTime() + (now.getTimezoneOffset() * 60000);
  const astanaTime = new Date(utcTime + (5 * 60 * 60 * 1000));
  
  let hours = astanaTime.getHours();
  const minutes = astanaTime.getMinutes();
  
  let timeString;
  if (config.use24HourFormat) {
    // 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    timeString = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
  } else {
    // 12-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    let displayHours = hours;
    const ampm = hours >= 12 ? 'PM' : 'AM';
    
    if (hours > 12) {
      displayHours = hours - 12;
    } else if (hours === 0) {
      displayHours = 12;
    }
    
    if (config.showAmPm) {
      timeString = `${displayHours}:${minutes.toString().padStart(2, '0')} ${ampm}`;
    } else {
      timeString = `${displayHours}:${minutes.toString().padStart(2, '0')}`;
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ
  const batteryInfo = getBatteryInfo();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –±–∞—Ç–∞—Ä–µ–µ–π
  const dateString = now.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    timeZone: 'Asia/Tashkent'
  });
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
  let tooltipParts = [];
  if (config.showClock) {
    tooltipParts.push(`–í—Ä–µ–º—è: ${timeString}`);
  }
  if (config.showBattery) {
    tooltipParts.push(`–ë–∞—Ç–∞—Ä–µ—è: ${batteryInfo.percentage}%`);
  }
  tooltipParts.push(`–î–∞—Ç–∞: ${dateString}`);
  
  tray.setToolTip(tooltipParts.join('\n'));
  
  // –î–ª—è macOS –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∫–æ–Ω–∫–∏ —Å –±–∞—Ç–∞—Ä–µ–µ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
  if (process.platform === 'darwin') {
    let titleParts = [];
    
    if (config.allowIconChange && config.trayText && config.trayText.trim() !== '') {
      titleParts.push(config.trayText.trim());
    }
    
    if (config.showBattery) {
      titleParts.push(`${batteryInfo.percentage}%`);
    }
    
    if (config.showClock) {
      titleParts.push(timeString);
    }
    
    if (titleParts.length > 0) {
      tray.setTitle(titleParts.join(' ‚Ä¢ '));
    } else {
      tray.setTitle('');
    }
  }
}

function getBatteryInfo() {
  try {
    // –î–ª—è macOS –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (process.platform === 'darwin') {
      const { execSync } = require('child_process');
      const batteryInfo = execSync('pmset -g batt').toString();
      
      const percentageMatch = batteryInfo.match(/(\d+)%/);
      const isCharging = batteryInfo.includes('charging') && !batteryInfo.includes('discharging');
      const isPlugged = batteryInfo.includes('AC Power') || batteryInfo.includes('charging');
      
      if (percentageMatch) {
        const percentage = parseInt(percentageMatch[1]);
        return {
          percentage,
          isCharging,
          isPlugged
        };
      }
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
      percentage: 100,
      isCharging: false,
      isPlugged: true
    };
  } catch (error) {
    return {
      percentage: 100,
      isCharging: false,
      isPlugged: true
    };
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º —á–µ—Ä–µ–∑ Electron API (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
function setupAutoStart() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Electron API –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    app.setLoginItemSettings({
      openAtLogin: true,
      openAsHidden: true, // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç–æ (–≤ —Ç—Ä–µ–µ)
      name: 'TrayWay'
    });
    
    console.log('–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Electron API');
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:', error);
    return false;
  }
}

function removeAutoStart() {
  try {
    // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Electron API
    app.setLoginItemSettings({
      openAtLogin: false,
      openAsHidden: false,
      name: 'TrayWay'
    });
    
    console.log('–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Electron API');
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:', error);
    return false;
  }
}

function isAutoStartEnabled() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Electron API
    const loginItemSettings = app.getLoginItemSettings();
    return loginItemSettings.openAtLogin;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:', error);
    return false;
  }
}

function showFirstRunDialog() {
  if (!config.firstRun) return;
  
  const { dialog } = require('electron');
  
  const result = dialog.showMessageBoxSync(null, {
    type: 'question',
    buttons: ['–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', '–î–∞, –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ'],
    defaultId: 1,
    title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞',
    message: '–ó–∞–ø—É—Å–∫–∞—Ç—å TrayWay –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ macOS?',
    detail: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.',
    icon: path.join(__dirname, 'icon.png')
  });
  
  if (result === 1) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
    if (setupAutoStart()) {
      config.autoStart = true;
      config.firstRun = false;
      saveConfig();
      
      dialog.showMessageBoxSync(null, {
        type: 'info',
        buttons: ['OK'],
        title: '–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        message: 'TrayWay –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ macOS',
        icon: path.join(__dirname, 'icon.png')
      });
    }
  } else {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è
    config.firstRun = false;
    config.autoStart = false;
    saveConfig();
  }
}

function saveConfig() {
  try {
    const configPath = path.join(__dirname, 'config.json');
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  }
} 
