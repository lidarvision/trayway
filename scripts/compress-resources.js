const fs = require('fs');
const path = require('path');

function compressAppResources(appPath) {
  console.log('üóúÔ∏è –°–∂–∏–º–∞—é —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  const appResourcesPath = path.join(appPath, 'Contents', 'Resources', 'app');
  
  if (!fs.existsSync(appResourcesPath)) {
    console.log('–ü—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return 0;
  }
  
  let totalSaved = 0;
  
  // –°–∂–∏–º–∞–µ–º HTML —Ñ–∞–π–ª—ã
  const htmlFiles = findFiles(appResourcesPath, '.html');
  htmlFiles.forEach(file => {
    const originalSize = fs.statSync(file).size;
    try {
      // –ü—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ HTML (—É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
      let content = fs.readFileSync(file, 'utf8');
      content = content
        .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
        .replace(/<!--[\s\S]*?-->/g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        .replace(/>\s+</g, '><') // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
        .trim();
      
      fs.writeFileSync(file, content);
      
      const newSize = fs.statSync(file).size;
      const saved = originalSize - newSize;
      totalSaved += saved;
      
      console.log(`–°–∂–∞—Ç ${path.basename(file)}: ${formatBytes(originalSize)} ‚Üí ${formatBytes(newSize)} (—ç–∫–æ–Ω–æ–º–∏—è: ${formatBytes(saved)})`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ ${file}:`, error.message);
    }
  });
  
  // –°–∂–∏–º–∞–µ–º CSS —Ñ–∞–π–ª—ã
  const cssFiles = findFiles(appResourcesPath, '.css');
  cssFiles.forEach(file => {
    const originalSize = fs.statSync(file).size;
    try {
      let content = fs.readFileSync(file, 'utf8');
      content = content
        .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
        .replace(/\/\*[\s\S]*?\*\//g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        .replace(/;\s*}/g, '}') // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
        .replace(/{\s*/g, '{') // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
        .replace(/\s*}/g, '}') // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
        .replace(/:\s*/g, ':') // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
        .replace(/;\s*/g, ';') // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
        .trim();
      
      fs.writeFileSync(file, content);
      
      const newSize = fs.statSync(file).size;
      const saved = originalSize - newSize;
      totalSaved += saved;
      
      console.log(`–°–∂–∞—Ç ${path.basename(file)}: ${formatBytes(originalSize)} ‚Üí ${formatBytes(newSize)} (—ç–∫–æ–Ω–æ–º–∏—è: ${formatBytes(saved)})`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ ${file}:`, error.message);
    }
  });
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∂–∞—Ç–∏–µ JS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
  console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–∂–∞—Ç–∏–µ JS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫');
  
  console.log(`\nüóúÔ∏è –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${formatBytes(totalSaved)}`);
  return totalSaved;
}

function findFiles(dir, extension) {
  const files = [];
  
  function searchDir(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    items.forEach(item => {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        searchDir(fullPath);
      } else if (item.endsWith(extension)) {
        files.push(fullPath);
      }
    });
  }
  
  searchDir(dir);
  return files;
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∂–∞—Ç–∏–µ
const appPath = process.argv[2];
if (!appPath) {
  console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node compress-resources.js <–ø—É—Ç—å_–∫_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é>');
  console.error('–ü—Ä–∏–º–µ—Ä: node compress-resources.js "release-build/trayyyy-darwin-arm64/trayyyy.app"');
  process.exit(1);
}

if (!fs.existsSync(appPath)) {
  console.error('–ü—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω:', appPath);
  process.exit(1);
}

compressAppResources(appPath);
