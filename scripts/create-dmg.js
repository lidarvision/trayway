const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function createInstructions() {
  const instructions = `TrayWay - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ

–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞

1. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ TrayWay.app –≤ –ø–∞–ø–∫—É Applications
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ Applications
3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è

macOS –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"

1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
2. –ù–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ TrayWay
3. –ù–∞–∂–º–∏—Ç–µ "–í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å"
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ Finder

1. –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ TrayWay.app
2. –í—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å"
3. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å" –≤ –¥–∏–∞–ª–æ–≥–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞

–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫:

- "–î–∞" - TrayWay –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É
- "–ù–µ—Ç" - –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é

–ù–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

- –ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ –≤ —Ç—Ä–µ–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é
- Cmd+1 - –±—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
- –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)

–ù–∞—Å—Ç—Ä–æ–π–∫–∏

–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é —Ç—Ä–µ—è –¥–ª—è:
- –î–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ –∏ —Å–∞–π—Ç–æ–≤
- –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ (—ç–º–æ–¥–∑–∏)
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤ –∏ –±–∞—Ç–∞—Ä–µ–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º

–ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ Telegram @lidarvision
`;

  return instructions;
}

// –°–æ–∑–¥–∞–µ–º DMG —Ñ–∞–π–ª
function createDMG(appPath, outputPath, architecture) {
  console.log(`\nüì¶ –°–æ–∑–¥–∞—é DMG –¥–ª—è ${architecture}...`);
  
  const tempDir = path.join(__dirname, '..', 'temp-dmg');
  const dmgName = `TrayWay-${architecture}`;
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
  if (fs.existsSync(tempDir)) {
    execSync(`rm -rf "${tempDir}"`);
  }
  fs.mkdirSync(tempDir, { recursive: true });
  
  try {
    // –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    execSync(`cp -R "${appPath}" "${tempDir}/"`);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Applications
    execSync(`ln -s /Applications "${tempDir}/Applications"`);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    const instructions = createInstructions();
    fs.writeFileSync(path.join(tempDir, 'README.txt'), instructions);
    
    // –°–æ–∑–¥–∞–µ–º DMG
    const dmgPath = path.join(__dirname, '..', 'release-build', `${dmgName}.dmg`);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π DMG –µ—Å–ª–∏ –µ—Å—Ç—å
    if (fs.existsSync(dmgPath)) {
      fs.unlinkSync(dmgPath);
    }
    
    // –°–æ–∑–¥–∞–µ–º DMG —Å –ø–æ–º–æ—â—å—é hdiutil
    execSync(`hdiutil create -volname "${dmgName}" -srcfolder "${tempDir}" -ov -format UDZO "${dmgPath}"`);
    
    console.log(`‚úÖ DMG —Å–æ–∑–¥–∞–Ω: ${dmgPath}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä: ${formatBytes(fs.statSync(dmgPath).size)}`);
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    execSync(`rm -rf "${tempDir}"`);
    
    return dmgPath;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DMG –¥–ª—è ${architecture}:`, error.message);
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (fs.existsSync(tempDir)) {
      execSync(`rm -rf "${tempDir}"`);
    }
    return null;
  }
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const architecture = process.argv[2];
  
  if (!architecture) {
    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node create-dmg.js <–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞>');
    console.error('–ü—Ä–∏–º–µ—Ä—ã:');
    console.error('  node create-dmg.js arm64');
    console.error('  node create-dmg.js x64');
    console.error('  node create-dmg.js universal');
    process.exit(1);
  }
  
  const releaseBuildPath = path.join(__dirname, '..', 'release-build');
  let appPath;
  
  switch (architecture) {
    case 'arm64':
      appPath = path.join(releaseBuildPath, 'TrayWay-darwin-arm64', 'TrayWay.app');
      break;
    case 'x64':
      appPath = path.join(releaseBuildPath, 'TrayWay-darwin-x64', 'TrayWay.app');
      break;
    case 'universal':
      appPath = path.join(releaseBuildPath, 'TrayWay-Universal', 'TrayWay.app');
      break;
    default:
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:', architecture);
      console.error('–î–æ—Å—Ç—É–ø–Ω—ã–µ: arm64, x64, universal');
      process.exit(1);
  }
  
  if (!fs.existsSync(appPath)) {
    console.error('‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', appPath);
    console.error('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–±–æ—Ä–∫—É —Å –ø–æ–º–æ—â—å—é npm run build:optimized');
    process.exit(1);
  }
  
  const dmgPath = createDMG(appPath, releaseBuildPath, architecture);
  
  if (dmgPath) {
    console.log(`\nüéâ DMG —Ñ–∞–π–ª –≥–æ—Ç–æ–≤: ${path.basename(dmgPath)}`);
    console.log(`üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${dmgPath}`);
  } else {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DMG —Ñ–∞–π–ª');
    process.exit(1);
  }
}

main();
