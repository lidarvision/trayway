const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π)
const KEEP_LOCALES = ['en', 'en_GB', 'ru'];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const OPTIMIZATION_SETTINGS = {
  removeGPU: true, // –£–¥–∞–ª–∏—Ç—å GPU –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
  removeUnusedResources: true, // –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  compressResources: false // –°–∂–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã (–º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –∑–∞–ø—É—Å–∫)
};

function optimizeElectronApp(appPath) {
  console.log('–ù–∞—á–∏–Ω–∞—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  const frameworksPath = path.join(appPath, 'Contents', 'Frameworks', 'Electron Framework.framework', 'Resources');
  
  if (!fs.existsSync(frameworksPath)) {
    console.error('–ü—É—Ç—å –∫ Electron Framework –Ω–µ –Ω–∞–π–¥–µ–Ω:', frameworksPath);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤—ã—Ö –ø–∞–ø–æ–∫
  const items = fs.readdirSync(frameworksPath);
  const localeDirs = items.filter(item => {
    const fullPath = path.join(frameworksPath, item);
    return fs.statSync(fullPath).isDirectory() && item.endsWith('.lproj');
  });
  
  console.log('–ù–∞–π–¥–µ–Ω–æ —è–∑—ã–∫–æ–≤—ã—Ö –ø–∞–ø–æ–∫:', localeDirs.length);
  
  let totalSaved = 0;
  
  // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –ø–∞–ø–∫–∏
  localeDirs.forEach(localeDir => {
    const localeName = localeDir.replace('.lproj', '');
    
    if (!KEEP_LOCALES.includes(localeName)) {
      const fullPath = path.join(frameworksPath, localeDir);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      const size = getDirectorySize(fullPath);
      totalSaved += size;
      
      console.log(`–£–¥–∞–ª—è—é ${localeDir} (${formatBytes(size)})`);
      
      try {
        fs.rmSync(fullPath, { recursive: true, force: true });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${localeDir}:`, error.message);
      }
    } else {
      console.log(`–û—Å—Ç–∞–≤–ª—è—é ${localeDir}`);
    }
  });
  
  console.log(`\n–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${formatBytes(totalSaved)}`);
  
  // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Resources
  const mainResourcesPath = path.join(appPath, 'Contents', 'Resources');
  if (fs.existsSync(mainResourcesPath)) {
    const mainItems = fs.readdirSync(mainResourcesPath);
    const mainLocaleDirs = mainItems.filter(item => {
      const fullPath = path.join(mainResourcesPath, item);
      return fs.statSync(fullPath).isDirectory() && item.endsWith('.lproj');
    });
    
    mainLocaleDirs.forEach(localeDir => {
      const localeName = localeDir.replace('.lproj', '');
      
      if (!KEEP_LOCALES.includes(localeName)) {
        const fullPath = path.join(mainResourcesPath, localeDir);
        const size = getDirectorySize(fullPath);
        totalSaved += size;
        
        console.log(`–£–¥–∞–ª—è—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Resources: ${localeDir} (${formatBytes(size)})`);
        
        try {
          fs.rmSync(fullPath, { recursive: true, force: true });
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${localeDir}:`, error.message);
        }
      }
    });
  }
  
  console.log(`\n–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${formatBytes(totalSaved)}`);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è GPU –±–∏–±–ª–∏–æ—Ç–µ–∫
  if (OPTIMIZATION_SETTINGS.removeGPU) {
    const gpuSaved = removeGPULibraries(appPath);
    totalSaved += gpuSaved;
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  if (OPTIMIZATION_SETTINGS.removeUnusedResources) {
    const resourcesSaved = removeUnusedResources(appPath);
    totalSaved += resourcesSaved;
  }
  
  console.log(`\nüéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø: ${formatBytes(totalSaved)}`);
  console.log(`üì¶ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${formatBytes(getDirectorySize(appPath))}`);
}

function getDirectorySize(dirPath) {
  let totalSize = 0;
  
  function calculateSize(itemPath) {
    const stats = fs.statSync(itemPath);
    
    if (stats.isDirectory()) {
      const items = fs.readdirSync(itemPath);
      items.forEach(item => {
        calculateSize(path.join(itemPath, item));
      });
    } else {
      totalSize += stats.size;
    }
  }
  
  try {
    calculateSize(dirPath);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞:', error.message);
  }
  
  return totalSize;
}

function removeGPULibraries(appPath) {
  console.log('\nüîß –£–¥–∞–ª—è—é GPU –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...');
  
  const librariesPath = path.join(appPath, 'Contents', 'Frameworks', 'Electron Framework.framework', 'Libraries');
  
  if (!fs.existsSync(librariesPath)) {
    console.log('–ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return 0;
  }
  
  // –°–ø–∏—Å–æ–∫ GPU –±–∏–±–ª–∏–æ—Ç–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
  const gpuLibraries = [
    'libvk_swiftshader.dylib', // 16MB - SwiftShader –¥–ª—è Vulkan
    'libGLESv2.dylib', // 6.7MB - OpenGL ES 2.0
    'libEGL.dylib', // 108KB - EGL
    'vk_swiftshader_icd.json' // 4KB - Vulkan ICD
  ];
  
  let totalSaved = 0;
  
  gpuLibraries.forEach(libName => {
    const libPath = path.join(librariesPath, libName);
    
    if (fs.existsSync(libPath)) {
      const size = fs.statSync(libPath).size;
      totalSaved += size;
      
      console.log(`–£–¥–∞–ª—è—é ${libName} (${formatBytes(size)})`);
      
      try {
        fs.unlinkSync(libPath);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${libName}:`, error.message);
      }
    }
  });
  
  console.log(`GPU –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${formatBytes(totalSaved)}`);
  return totalSaved;
}

function removeUnusedResources(appPath) {
  console.log('\nüóëÔ∏è –£–¥–∞–ª—è—é –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã...');
  
  const resourcesPath = path.join(appPath, 'Contents', 'Frameworks', 'Electron Framework.framework', 'Resources');
  
  if (!fs.existsSync(resourcesPath)) {
    console.log('–ü—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return 0;
  }
  
  // –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
  const unusedResources = [
    'chrome_200_percent.pak', // 184KB - –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ UI
    'chrome_100_percent.pak', // 116KB - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ UI
    'MainMenu.nib' // 4KB - –º–µ–Ω—é macOS
  ];
  
  let totalSaved = 0;
  
  unusedResources.forEach(resourceName => {
    const resourcePath = path.join(resourcesPath, resourceName);
    
    if (fs.existsSync(resourcePath)) {
      const size = fs.statSync(resourcePath).size;
      totalSaved += size;
      
      console.log(`–£–¥–∞–ª—è—é ${resourceName} (${formatBytes(size)})`);
      
      try {
        fs.unlinkSync(resourcePath);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${resourceName}:`, error.message);
      }
    }
  });
  
  console.log(`–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã —É–¥–∞–ª–µ–Ω—ã. –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${formatBytes(totalSaved)}`);
  return totalSaved;
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
const appPath = process.argv[2];
if (!appPath) {
  console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node optimize-app.js <–ø—É—Ç—å_–∫_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é>');
  console.error('–ü—Ä–∏–º–µ—Ä: node optimize-app.js "release-build/trayyyy-darwin-arm64/trayyyy.app"');
  process.exit(1);
}

if (!fs.existsSync(appPath)) {
  console.error('–ü—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω:', appPath);
  process.exit(1);
}

optimizeElectronApp(appPath);
